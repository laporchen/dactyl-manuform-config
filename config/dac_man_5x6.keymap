#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define RAISE   1
#define LOWER   3
#define QUICK   2
#define DOUBLE  4

&sk {
    release-after-ms = <350>;
    quick-release;
    ignore-modifiers;
};

/ {
    behaviors {
        qk: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC    &kp N1  &kp N2        &kp N3     &kp N4  &kp N5                                           &kp N6      &kp N7           &kp N8     &kp N9           &kp N0         &kp PRINTSCREEN
&td0       &kp Q   &kp W         &kp E      &kp R   &kp T                                            &kp Y       &kp U            &kp I      &kp O            &kp P          &kp BSLH
&kp TAB    &kp A   &kp S         &kp D      &kp F   &kp G                                            &kp H       &kp J            &kp K      &kp L            &kp SEMICOLON  &kp SQT
&kp LCTRL  &kp Z   &kp X         &kp C      &kp V   &kp B                                            &kp N       &kp M            &kp COMMA  &kp DOT          &kp FSLH       &kp MINUS
                   &sk LEFT_GUI  &sk LCTRL                                                                                        &sk RCTRL  &kp RIGHT_SHIFT
                                            &mo 1   &kp SPACE                                        &kp ENTER   &lt 2 BACKSPACE
                                                    &sk LEFT_ALT  &sk LSHIFT          &kp BSPC       &kp PG_UP
                                                    &kp LEFT_GUI  &kp LA(LEFT_SHIFT)  &kp PAGE_DOWN  &kp DELETE
            >;
        };

        raise {
            bindings = <
&kp GRAVE      &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                          &kp F6          &kp F7           &kp F8            &kp F9             &kp F10       &kp F11
&kp TILDE      &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT                     &kp CARET       &kp AMPERSAND    &kp ASTERISK      &kp MINUS          &kp PLUS      &kp F12
&kp BACKSPACE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                    &kp LPAR        &kp RPAR         &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS     &kp DOUBLE_QUOTES
&tog 0         &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0                    &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LESS_THAN     &kp GREATER_THAN   &kp QUESTION  &kp UNDER
                             &trans        &trans                                                                                       &kp PIPE          &kp COLON
                                                         &none         &none                           &kp EQUAL       &mo 3
                                                                       &none         &none  &kp TILDE  &kp UNDER
                                                                       &bootloader   &none  &kp PIPE   &kp TILDE
            >;
        };

        lower {
            bindings = <
&kp GRAVE  &kp F1        &kp F2    &kp F3         &kp F4     &kp F5                    &kp F6       &kp F7     &kp F8    &kp F9    &kp F10       &kp F11
&none      &kp NUMBER_1  &kp N2    &kp N3         &kp N4     &kp N5                    &kp N6       &kp N7     &kp N8    &kp N9    &kp N0        &kp F12
&none      &kp COLON     &kp PIPE  &kp AMPERSAND  &kp TILDE  &none                     &none        &kp LEFT   &kp DOWN  &kp UP    &kp RIGHT     &none
&none      &none         &none     &none          &none      &kp C_MUTE                &none        &kp EQUAL  &kp PLUS  &kp PIPE  &kp QUESTION  &none
                         &none     &none                                                                       &none     &none
                                                  &none      &none                     &none        &none
                                                             &none       &none  &none  &none
                                                             &none       &none  &none  &bootloader
            >;
        };

        double {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &none  &none                &none              &none      &none                 &none                 &none                 &none
&bt BT_NXT    &none         &none         &none  &none  &none                &kp DOUBLE_QUOTES  &kp APOS   &kp LG(LA(NUMBER_1))  &kp LG(LA(NUMBER_2))  &kp LG(LA(NUMBER_3))  &none
&bt BT_PRV    &none         &none         &none  &none  &none                &kp EQUAL          &kp COLON  &kp LG(LA(NUMBER_4))  &kp LG(LA(NUMBER_5))  &kp LG(LA(NUMBER_6))  &none
&bt BT_CLR    &none         &none         &none  &none  &none                &kp TILDE          &kp QMARK  &kp LG(LA(NUMBER_7))  &kp LG(LA(NUMBER_8))  &kp LG(LA(NUMBER_9))  &none
                            &none         &none                                                            &none                 &none
                                                 &none  &none                &none              &none
                                                        &none  &none  &none  &none
                                                        &none  &none  &none  &none
            >;
        };
    };
};
